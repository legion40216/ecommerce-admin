// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// generator client {
//   provider = "prisma-client-js"
// }

// // prisma/schema.prisma
// datasource db {
//   provider  = "postgresql"
//   url  	    = env("DATABASE_URL")
//   // uncomment next line if you use Prisma <5.10
//   // directUrl = env("DATABASE_URL_UNPOOLED")
// }

model Store {
  id              String  @id @default(uuid())
  name            String
  userId          String
  createAt        DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Category  Category[]  @relation("StoreToCategory")
  Billboard Billboard[] @relation("StoreToBillBoard")
  Size      Size[]      @relation("StoreToSize")
  Color     Color[]     @relation("StoreToColor")

  Product Product[] @relation("StoreToProduct")
  Order   Order[]   @relation("StoreToOrder")
}

model Billboard {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToBillBoard", fields: [storeId], references: [id])
  label         String
  imageUrl      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Category Category[]
}

model Category {
  id            String @id @default(uuid())
  name          String
  storeId       String
  store         Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard @relation(fields: [billboardId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Product Product[] @relation("CategoryToProduct")
}

model Size {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToSize", fields: [storeId], references: [id])
  name          String
  value         String
   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Product Product[]
}

model Color {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToColor", fields: [storeId], references: [id])
  name          String
  value         String
   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Product Product[]
}

model Product {
  id         String   @id @default(uuid())
  storeId    String
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  sizeId     String
  size       Size     @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id])
  images     Image[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  OrderItem OrderItem[]
}

model Image {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id        String  @id @default(uuid())
  storeId   String
  store     Store   @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]  
  isPaid    Boolean @default(false)
  phone     String  @default("")
  address   String  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id]) 
}