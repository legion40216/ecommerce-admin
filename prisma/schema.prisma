// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// generator client {
//   provider = "prisma-client-js"
// }

// // prisma/schema.prisma
// datasource db {
//   provider  = "postgresql"
//   url  	    = env("DATABASE_URL")
//   // uncomment next line if you use Prisma <5.10
//   // directUrl = env("DATABASE_URL_UNPOOLED")
// }

model Store {
  id              String  @id @default(uuid())
  name            String
  userId          String
  createAt        DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Category  Category[]  @relation("StoreToCategory")
  Billboard Billboard[] @relation("StoreToBillBoard")
  Size      Size[]      @relation("StoreToSize")
  Color     Color[]     @relation("StoreToColor")

  Product Product[] @relation("StoreToProduct")
  Order   Order[]   @relation("StoreToOrder")

  Luster Luster[] @relation("StoreToLuster")

  Cut Cut[] @relation("StoreToCut")

  Clarity Clarity[] @relation("StoreToClarity")

  Shape Shape[] @relation("StoreToShape")
}

model Billboard {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToBillBoard", fields: [storeId], references: [id])
  label         String
  imageUrl      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Category Category[]
}

model Category {
  id            String @id @default(uuid())
  name          String
  storeId       String
  store         Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard @relation(fields: [billboardId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Product Product[] @relation("CategoryToProduct")
}

model Size {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToSize", fields: [storeId], references: [id])
  name          String
  value         String
   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Product Product[]
}

model Color {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToColor", fields: [storeId], references: [id])
  name          String
  value         String
   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Product Product[]
}


model Zodiac {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  storeId         String
  store           Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId      String
  category        Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name            String
  price           Decimal
  quantity        Int       @default(0)
  location        String?   // Country of origin
  isFeatured      Boolean   @default(false)
  isArchived      Boolean   @default(false)
  sizeId          String
  size            Size      @relation(fields: [sizeId], references: [id])
  colorId         String
  color           Color     @relation(fields: [colorId], references: [id])
  images          Image[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Gemstone-specific fields
  weight          Float     // Required
  shapeId         String
  shape           Shape     @relation(fields: [shapeId], references: [id])
  clarityId       String?
  clarity         Clarity?  @relation(fields: [clarityId], references: [id])
  cutId           String?
  cut             Cut?      @relation(fields: [cutId], references: [id])
  length          Float?    // in millimeters
  width           Float?    // in millimeters
  depth           Float?    // in millimeters
  lusterId        String?
  luster          Luster?   @relation(fields: [lusterId], references: [id])

  // Additional fields
  treatment       String?
  certification   String?
  origin          String?   // Specific origin (e.g., mine name)
  rarityFactor    String?
  inclusions      String?
  fluorescence    String?

  zodiacId  String?
  zodiac    Zodiac?   @relation(fields: [zodiacId], references: [id])

  OrderItem       OrderItem[]
}


model Shape {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToShape", fields: [storeId], references: [id])
  name      String    @unique 
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Clarity {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToClarity", fields: [storeId], references: [id])
  grade     String    @unique 
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cut {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCut", fields: [storeId], references: [id])
  grade     String    @unique 
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Luster {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToLuster", fields: [storeId], references: [id])
  type      String    @unique 
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id                String      @id @default(uuid())
  storeId           String
  store             Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems        OrderItem[]
  isPaid            Boolean     @default(false)
  customerName      String
  email             String
  phone             String
  address           String
  city              String
  country           String
  postalCode        String
  totalPrice        Decimal
  paymentMethod     String      
  paymentIntentId   String?   
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  count      Int      @default(0)      
  price      Decimal
}